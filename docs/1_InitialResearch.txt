@file 1_InitialResearch.txt
@location docs
@author Raymond Byczko
@company self
@start_date 2017-02-15
@change_history 2017-02-15, RByczko, Added '3.0 VERSION CONTROL'
and '3.1 VERSION CONTROL - OTHER SOFTWARE ETC'
@change_history 2017-02-15, RByczko, Added '4.0 WEBSERVER'.
And subsequent sections for WEBSERVER.
@change_history 2017-02-15, RByczko, Added the following:
'5.0 DATABASE - CODEIGNITER', '5.1 DATABASE - EXAMPLE AFTER
MIGRATION'.  Also corrected dates.

The purpose of this file is to discuss initial research into
how certain decisions were made with 'postcard creator'.

1.0 PHP FRAMEWORK

A model view controller (MVC) framework is a strong way to go because
of the decoupling of functionality that occurs.  Controllers will
do the routing, models will manipulate the database, and the view
will take care of output.

Months of recent experience with CodeIgniter 3.0 indicates this is
a very good MVC.  So based on favorable real world experience,
its a good choice.

2.0 DATABASE REQUIREMENT

The requirements indicate a standalone (serverless) database is
preferred rather than one with a server.  So the choice is
something like Sqlite3 vs. Mysql.

Standalone should be fine.  However, does Sqlite3 work in CodeIgniter?
I googled it and got a positive at the following URL.

http://stackoverflow.com/questions/37079746/sqlite3-in-codeigniter-3-0-6

So based on this, we are fine with CodeIgniter.


3.0 VERSION CONTROL

Git on github.com is utilized as version control.

For reference purposes, here are some steps as to what has to be done.

>cd websites/postcardit
>git init .
>cd docs
>cd git add 1_InitialResearch.txt
>git commit -m "RByczko etc"
>git remote add origin git@github.com:RaymondByczko/postcardit.git
>git push -u origin master

For the above, I am just emphasizeing the remote add and push for git.
Its just some steps that are handy to document, at least for me.

3.1 VERSION CONTROL - OTHER SOFTWARE ETC

It is easy to just start using some framework etc, and forget (ignore) other
issues with it.  What I am speaking of is some 3rd party framework like
CodeIgniter.  That code was downloaded as a zip.  When it is extracted, it is
nice to have 'git commits' on the extracted files.  That is, there is a commit
before the extraction.  Then the extraction happens.  Those extracted files
are then added completely to git, and then another commit happens.
In this way, the addition of CodeIgniter is bounded lets say, before, and after,
by commits.

This allows post install changes to CodeIgniter, like adding a controller lets say,
to be in its own commit.  The evolution of the igniter application can be more
properly tracked in this way.

I like this seperation in version control, with proper demarcation.

The process would be less than optimum if a) you extract code igniter b) you
immediately add controllers, views, and change files and then c) do a complete
git add/git commit.

4.0 WEBSERVER

Apache2 is used as the webserver.  Local development occurs on a Linux
Ubuntu box.

postcardit.dev is created under /etc/apache2/sites-available

The site becomes enabled by running:
sudo a2ensite postcardit.dev

Running the above, you are reminded that you need to run:
service apache2 reload

4.1 WEBSERVER - INDEXES

Made sure to put '-Indexes' as in the following it or one will see directory
contents.

<Directory /home/raymond/websites/postcardit/>
        Options -Indexes FollowSymLinks MultiViews
        AllowOverride All
        Order allow,deny
        allow from all
</Directory>

4.2 WEBSERVER - SET DOCROOT PROPERLY 

CodeIgniter advises to set DOCROOT to where index.php is.  Do it like this within
postcardit.dev !

DocumentRoot /home/raymond/websites/postcardit/CodeIgniter-3.1.3/

5.0 DATABASE - CODEIGNITER

Migration files are useful to store the step by step build up of a database schema.
Each step along the way is stored in its own php file.  Calling a certain migrations
command allows build up or tear down, and other type of configuration too.

For this to work, timestamps are useful.  I have a bash alias known as 'migdate'.
It is stored in ./bash/bash_aliases  Its normally a hidden file, but I removed
the initial '.' from its name for clarity.

You use migdate in the following way, relying on command substitution in bash.
Here is an example invocation.

touch `migdate`_add_account.php

Touch creates an empty file.  The 'add_account' bit in the name reminds us we are adding
a table called account.  Inside the file create, one can put in some php code.

Basically you need a class that extends (that is derives) from CI_Migration.

5.1 DATABASE - EXAMPLE AFTER MIGRATION

It is possible to examine the schema of the sqlite database file after running a migration.
Here is a screenshot after two seperate migration files were processed, for when
the schema is constructed.

See: screenshots/schema_after_2_migration_steps.png

As it is said, a picture is worth a thousand words.
